const { readFileSync,  writeFileSync } = require("fs");
const path = require('path');
//–ü–∞–∫–µ—Ç –¥–ª—è .evn
// require('dotenv').config(); //–∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Vercel
//–ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
const { Telegraf, Markup } = require('telegraf');
const { message } = require('telegraf/filters')

//–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
const GameCities = require('./GameCities');

const BOT_TOKEN = process.env.BOT_TOKEN;
const SECRET_PATH = process.env.SECRET_PATH;
const VERCEL_URL = process.env.VERCEL_URL; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è Vercel

const bot = new Telegraf(BOT_TOKEN);
const game;

let stringHi = "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ '–ì–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏'.\n" +
            "–¶–µ–ª—å: –ù–∞–∑–≤–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏ –ø–æ —Ü–µ–ø–æ—á–∫–µ,\n" +
            "—á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–∞—á–∏–Ω–∞–ª—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.\n" +
            "–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –¨, –´, –ô, –™, –Å - –±–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É.\n" +
            "–ù–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤.\n" +
            "–í—ã–∏–≥—Ä–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –¥–æ–ª—å—à–µ –ø—Ä–æ–¥–µ—Ä–∂–∏—Ç—Å—è.\n" +
            "–°–¥–µ–ª–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ö–æ–¥!\n\n"+
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏:\n"+
            "\"/commands\"\n";

let stringCommands = "\"/start\" : –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã\n" +
            "\"/help\" : –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É. –£ —Ç–µ–±—è –µ—Å—Ç—å 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏\n" +
            "\"/commands\" : –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
            "\"/stop\" : –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É\n";

let finishText = "–°–ø–∞—Å–∏–±–æ, –∑–∞ –∏–≥—Ä—É. –ë—ã–ª–æ –æ—á–µ–Ω—å –∑–¥–æ—Ä–æ–≤–æ –∏–≥—Ä–∞—Ç—å —Å —Ç–æ–±–æ–π! –î–æ –≤—Å—Ç—Ä–µ—á–∏!\n" +
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞, —Ç–æ –≤–≤–µ–¥–∏ \"/start\"";
// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
const dataCitiesPath = path.join(__dirname, 'dataCities.txt');
console.log(`–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${dataCitiesPath}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –ª–æ–≥–∞—Ö Vercel

try {
  const dataCities = readFileSync(dataCitiesPath, 'utf-8').trim().split('\n');//—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏ –¥–µ–ª–∞–µ–º –º–∞—Å—Å–∏–≤ 
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${dataCities.length} –≥–æ—Ä–æ–¥–æ–≤`); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  game = new GameCities(dataCities);
  
} catch (e) {
  console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', e);
  process.exit(1); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
}


const gameKeyboard = Markup.keyboard([
    ['üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞'],
    ['üìã –ö–æ–º–∞–Ω–¥—ã', 'üö™ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É']
]).resize().oneTime(false);

bot.start((ctx) => {
    ctx.reply(stringHi, gameKeyboard);
    console.log("bot start!");
    
    game.gameInit();
});

bot.hears('üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', (ctx) => {
    ctx.reply(stringHi, gameKeyboard);
    game.gameInit();
});

bot.command('stop', (ctx) => {
  ctx.reply(finishText, Markup.removeKeyboard());
  game.gameStop();
});

bot.hears('üö™ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', (ctx) => {
  ctx.reply(finishText, Markup.removeKeyboard());
  game.gameStop();
});


bot.command('commands', (ctx) => {
  ctx.reply(stringCommands);
});

bot.hears('üìã –ö–æ–º–∞–Ω–¥—ã', (ctx) => {
  ctx.reply(stringCommands);
});

try {
  bot.command('help', async (ctx) => {
    await ctx.replyWithChatAction('typing');
    const response = game.gameHints();

    if (typeof response === 'string') {
      await ctx.reply(response);
    } else {
      await ctx.reply('–£–ø—Å —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞');
    }
  });
} catch (e) {
  console.log(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ : ${e}`);
}

try {
  bot.hears('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞', async (ctx) => {
    await ctx.replyWithChatAction('typing');
    const response = game.gameHints();

    if (typeof response === 'string') {
      await ctx.reply(response);
    } else {
      await ctx.reply('–£–ø—Å —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞');
    }
  });
} catch (e) {
  console.log(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ : ${e}`);
}

try {
  bot.on(message('text'), async (ctx) => {
    const messageText = ctx.message.text;
    const chatId = ctx.message.chat.id;

    await ctx.replyWithChatAction('typing')

      const response = game.gameLogic(messageText);

      if (typeof response === 'string') {
        await ctx.reply(response);
      } else {
        await ctx.reply('–£–ø—Å —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞');
      }
  });
} catch (e) {
  console.log(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ : ${e}`);
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
bot.use((ctx, next) => {
    const secretToken = ctx.update?.webhookData?.secret_token || ctx.state.secretPathComponent;
    if (secretToken === SECRET_PATH) {
        return next();
    }
    console.log('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω');
    if (ctx.res) {
        return ctx.res.status(401).send('Unauthorized');
    }
    return ctx.telegram.deleteWebhook();
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ Vercel
if (VERCEL_URL) {
    const webhookUrl = `https://${VERCEL_URL}/api/bot`;
    bot.telegram.setWebhook(webhookUrl, {
        secret_token: SECRET_PATH,
        drop_pending_updates: true
    }).then(() => {
        console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${webhookUrl}`);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', err);
    });
}

// Serverless-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
//webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
module.exports = async (req, res) => {
    try {
        console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`);
        
        if (req.method === 'POST') {
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ update (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
            
            await bot.handleUpdate(req.body, res);
        } else {
            // –î–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
            res.status(200).json({ 
                status: 'OK',
                message: 'Telegram bot is running',
                environment: process.env.NODE_ENV || 'development'
            });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};
